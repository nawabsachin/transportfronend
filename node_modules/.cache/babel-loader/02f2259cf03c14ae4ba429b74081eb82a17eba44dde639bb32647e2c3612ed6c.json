{"ast":null,"code":"// // api/product.js\n\n// // Function to fetch products from the server\n// export const getProducts = async () => {\n//   try {\n//     const response = await fetch('http://localhost:5000/api/products');\n//     if (!response.ok) {\n//       throw new Error('Failed to fetch products');\n//     }\n//     const data = await response.json();\n//     return data;\n//   } catch (err) {\n//     console.error('Error fetching products:', err);\n//     throw new Error('Failed to load products: ' + err.message);\n//   }\n// };\n\n// // Function to delete a product by its ID\n// export const deleteProduct = async (id) => {\n//   try {\n//     const response = await fetch(`http://localhost:5000/api/products/${id}`, {\n//       method: 'DELETE',\n//     });\n//     if (!response.ok) {\n//       throw new Error('Failed to delete product');\n//     }\n//   } catch (err) {\n//     console.error('Error deleting product:', err);\n//     throw new Error('Failed to delete product');\n//   }\n// };\n\n// // Function to update an existing product\n// export const updateProduct = async (id, productData) => {\n//   try {\n//     const response = await fetch(`http://localhost:5000/api/products/${id}`, {\n//       method: 'PUT',\n//       headers: { 'Content-Type': 'application/json' },\n//       body: JSON.stringify(productData),\n//     });\n//     if (!response.ok) {\n//       throw new Error('Failed to update product');\n//     }\n//   } catch (err) {\n//     console.error('Error updating product:', err);\n//     throw new Error('Failed to update product');\n//   }\n// };\n\n// // Function to create a new product\n// export const createProduct = async (productData) => {\n//   try {\n//     const response = await fetch('http://localhost:5000/api/products', {\n//       method: 'POST',\n//       headers: { 'Content-Type': 'application/json' },\n//       body: JSON.stringify(productData),\n//     });\n//     if (!response.ok) {\n//       throw new Error('Failed to create product');\n//     }\n//     return await response.json();\n//   } catch (err) {\n//     console.error('Error creating product:', err);\n//     throw new Error('Failed to create product');\n//   }\n// };\n\nconst API_BASE = 'https://transportbackend-git-main-nawabsachins-projects.vercel.app/api';\n// https://transportbackend-git-main-nawabsachins-projects.vercel.app/\n\nconst getToken = () => localStorage.getItem('admin-auth');\n\n// Get all products\nexport const getProducts = async () => {\n  const res = await fetch(`${API_BASE}/products`);\n  if (!res.ok) throw new Error('Failed to fetch products');\n  return res.json();\n};\n\n// Create product\nexport const createProduct = async productFormData => {\n  const res = await fetch(`${API_BASE}/products`, {\n    method: 'POST',\n    headers: {\n      Authorization: `Bearer ${getToken()}`\n    },\n    body: productFormData\n  });\n  if (!res.ok) throw new Error('Failed to create product');\n  return res.json();\n};\n\n// Update product\nexport const updateProduct = async (id, productFormData) => {\n  const res = await fetch(`${API_BASE}/products/${id}`, {\n    method: 'PUT',\n    headers: {\n      Authorization: `Bearer ${getToken()}`\n    },\n    body: productFormData\n  });\n  if (!res.ok) throw new Error('Failed to update product');\n  return res.json();\n};\n\n// Delete product\nexport const deleteProduct = async id => {\n  const res = await fetch(`${API_BASE}/products/${id}`, {\n    method: 'DELETE',\n    headers: {\n      Authorization: `Bearer ${getToken()}`\n    }\n  });\n  if (!res.ok) throw new Error('Failed to delete product');\n  return res.json();\n};","map":{"version":3,"names":["API_BASE","getToken","localStorage","getItem","getProducts","res","fetch","ok","Error","json","createProduct","productFormData","method","headers","Authorization","body","updateProduct","id","deleteProduct"],"sources":["C:/Users/sharm/OneDrive/Desktop/Zaeesh/transport11/src/api/proudct.js"],"sourcesContent":["// // api/product.js\r\n\r\n// // Function to fetch products from the server\r\n// export const getProducts = async () => {\r\n//   try {\r\n//     const response = await fetch('http://localhost:5000/api/products');\r\n//     if (!response.ok) {\r\n//       throw new Error('Failed to fetch products');\r\n//     }\r\n//     const data = await response.json();\r\n//     return data;\r\n//   } catch (err) {\r\n//     console.error('Error fetching products:', err);\r\n//     throw new Error('Failed to load products: ' + err.message);\r\n//   }\r\n// };\r\n\r\n// // Function to delete a product by its ID\r\n// export const deleteProduct = async (id) => {\r\n//   try {\r\n//     const response = await fetch(`http://localhost:5000/api/products/${id}`, {\r\n//       method: 'DELETE',\r\n//     });\r\n//     if (!response.ok) {\r\n//       throw new Error('Failed to delete product');\r\n//     }\r\n//   } catch (err) {\r\n//     console.error('Error deleting product:', err);\r\n//     throw new Error('Failed to delete product');\r\n//   }\r\n// };\r\n\r\n// // Function to update an existing product\r\n// export const updateProduct = async (id, productData) => {\r\n//   try {\r\n//     const response = await fetch(`http://localhost:5000/api/products/${id}`, {\r\n//       method: 'PUT',\r\n//       headers: { 'Content-Type': 'application/json' },\r\n//       body: JSON.stringify(productData),\r\n//     });\r\n//     if (!response.ok) {\r\n//       throw new Error('Failed to update product');\r\n//     }\r\n//   } catch (err) {\r\n//     console.error('Error updating product:', err);\r\n//     throw new Error('Failed to update product');\r\n//   }\r\n// };\r\n\r\n// // Function to create a new product\r\n// export const createProduct = async (productData) => {\r\n//   try {\r\n//     const response = await fetch('http://localhost:5000/api/products', {\r\n//       method: 'POST',\r\n//       headers: { 'Content-Type': 'application/json' },\r\n//       body: JSON.stringify(productData),\r\n//     });\r\n//     if (!response.ok) {\r\n//       throw new Error('Failed to create product');\r\n//     }\r\n//     return await response.json();\r\n//   } catch (err) {\r\n//     console.error('Error creating product:', err);\r\n//     throw new Error('Failed to create product');\r\n//   }\r\n// };\r\n\r\n\r\nconst API_BASE = 'https://transportbackend-git-main-nawabsachins-projects.vercel.app/api';\r\n// https://transportbackend-git-main-nawabsachins-projects.vercel.app/\r\n\r\n\r\n\r\nconst getToken = () => localStorage.getItem('admin-auth');\r\n\r\n// Get all products\r\nexport const getProducts = async () => {\r\n  const res = await fetch(`${API_BASE}/products`);\r\n  if (!res.ok) throw new Error('Failed to fetch products');\r\n  return res.json();\r\n};\r\n\r\n// Create product\r\nexport const createProduct = async (productFormData) => {\r\n  const res = await fetch(`${API_BASE}/products`, {\r\n    method: 'POST',\r\n    headers: {\r\n      Authorization: `Bearer ${getToken()}`,\r\n    },\r\n    body: productFormData,\r\n  });\r\n\r\n  if (!res.ok) throw new Error('Failed to create product');\r\n  return res.json();\r\n};\r\n\r\n// Update product\r\nexport const updateProduct = async (id, productFormData) => {\r\n  const res = await fetch(`${API_BASE}/products/${id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      Authorization: `Bearer ${getToken()}`,\r\n    },\r\n    body: productFormData,\r\n  });\r\n\r\n  if (!res.ok) throw new Error('Failed to update product');\r\n  return res.json();\r\n};\r\n\r\n// Delete product\r\nexport const deleteProduct = async (id) => {\r\n  const res = await fetch(`${API_BASE}/products/${id}`, {\r\n    method: 'DELETE',\r\n    headers: {\r\n      Authorization: `Bearer ${getToken()}`,\r\n    },\r\n  });\r\n\r\n  if (!res.ok) throw new Error('Failed to delete product');\r\n  return res.json();\r\n};\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,MAAMA,QAAQ,GAAG,wEAAwE;AACzF;;AAIA,MAAMC,QAAQ,GAAGA,CAAA,KAAMC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;;AAEzD;AACA,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;EACrC,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGN,QAAQ,WAAW,CAAC;EAC/C,IAAI,CAACK,GAAG,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;EACxD,OAAOH,GAAG,CAACI,IAAI,CAAC,CAAC;AACnB,CAAC;;AAED;AACA,OAAO,MAAMC,aAAa,GAAG,MAAOC,eAAe,IAAK;EACtD,MAAMN,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGN,QAAQ,WAAW,EAAE;IAC9CY,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACPC,aAAa,EAAE,UAAUb,QAAQ,CAAC,CAAC;IACrC,CAAC;IACDc,IAAI,EAAEJ;EACR,CAAC,CAAC;EAEF,IAAI,CAACN,GAAG,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;EACxD,OAAOH,GAAG,CAACI,IAAI,CAAC,CAAC;AACnB,CAAC;;AAED;AACA,OAAO,MAAMO,aAAa,GAAG,MAAAA,CAAOC,EAAE,EAAEN,eAAe,KAAK;EAC1D,MAAMN,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGN,QAAQ,aAAaiB,EAAE,EAAE,EAAE;IACpDL,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACPC,aAAa,EAAE,UAAUb,QAAQ,CAAC,CAAC;IACrC,CAAC;IACDc,IAAI,EAAEJ;EACR,CAAC,CAAC;EAEF,IAAI,CAACN,GAAG,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;EACxD,OAAOH,GAAG,CAACI,IAAI,CAAC,CAAC;AACnB,CAAC;;AAED;AACA,OAAO,MAAMS,aAAa,GAAG,MAAOD,EAAE,IAAK;EACzC,MAAMZ,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGN,QAAQ,aAAaiB,EAAE,EAAE,EAAE;IACpDL,MAAM,EAAE,QAAQ;IAChBC,OAAO,EAAE;MACPC,aAAa,EAAE,UAAUb,QAAQ,CAAC,CAAC;IACrC;EACF,CAAC,CAAC;EAEF,IAAI,CAACI,GAAG,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;EACxD,OAAOH,GAAG,CAACI,IAAI,CAAC,CAAC;AACnB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}