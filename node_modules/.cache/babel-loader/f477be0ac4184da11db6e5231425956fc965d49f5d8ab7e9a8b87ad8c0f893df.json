{"ast":null,"code":"\n\n// import React, { useState, useEffect } from 'react';\n// import { addProduct, updateProduct, deleteProduct } from './productService';\n\n// const ProductForm = ({ editProduct, onSave }) => {\n//   const [product, setProduct] = useState({ name: '', price: '', description: '' });\n//   const [image, setImage] = useState(null);\n//   console.log(image,'image');\n//   const [preview, setPreview] = useState(null);\n//   const [successPopup, setSuccessPopup] = useState(false);\n\n//   useEffect(() => {\n//     if (editProduct) {\n//       setProduct({\n//         name: editProduct.name || '',\n//         price: editProduct.price || '',\n//         description: editProduct.description || '',\n//       });\n\n//       if (editProduct.image) {\n//         setPreview(`http://localhost:5000/uploads/${editProduct.image}`);\n//       }\n//     }\n//   }, [editProduct]);\n\n//   const handleImageChange = (e) => {\n//     const file = e.target.files[0];\n//     setImage(file);\n//     setPreview(URL.createObjectURL(file));\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     const formData = new FormData();\n//     formData.append('name', product.name);\n//     formData.append('price', product.price);\n//     formData.append('description', product.description);\n//     if (image) formData.append('image', image);\n\n//     const token = localStorage.getItem('token');\n//     if (!token) return alert('No token found');\n\n//     try {\n//       if (editProduct?._id) {\n//         await updateProduct(editProduct._id, formData, token);\n//       } else {\n//         await addProduct(formData, token);\n//       }\n\n//       setSuccessPopup(true);\n//       if (onSave) onSave();\n//       setProduct({ name: '', price: '', description: '' });\n//       setImage(null);\n//       setPreview(null);\n//     } catch (error) {\n//       console.error(error);\n//       alert('Error saving product: ' + (error.response?.data?.message || error.message));\n//     }\n//   };\n\n//   const handleDelete = async () => {\n//     if (editProduct && window.confirm('Are you sure?')) {\n//       try {\n//         await deleteProduct(editProduct._id);\n//         if (onSave) onSave();\n//       } catch (error) {\n//         alert('Error deleting product');\n//         console.error(error);\n//       }\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <form onSubmit={handleSubmit}>\n//         <h3>{editProduct ? 'Edit' : 'Add'} Product</h3>\n//         <input placeholder=\"Name\" value={product.name} onChange={e => setProduct({ ...product, name: e.target.value })} />\n//         <input placeholder=\"Price\" value={product.price} onChange={e => setProduct({ ...product, price: e.target.value })} />\n//         <textarea placeholder=\"Description\" value={product.description} onChange={e => setProduct({ ...product, description: e.target.value })} />\n//         <input type=\"file\" accept=\"image/*\" onChange={handleImageChange} />\n//         {preview && <img src={preview} alt=\"Preview\" style={{ width: '150px' }} />}\n//         <button type=\"submit\">{editProduct ? 'Update' : 'Add'} Product</button>\n//         {editProduct && <button type=\"button\" onClick={handleDelete}>Delete</button>}\n//       </form>\n\n//       {successPopup && (\n//         <div style={popupStyle}>\n//           <div style={popupContentStyle}>\n//             <h4>Product successfully {editProduct ? 'updated' : 'added'}!</h4>\n//             <button onClick={() => setSuccessPopup(false)}>Close</button>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// const popupStyle = {\n//   position: 'fixed',\n//   top: 0, left: 0,\n//   width: '100%', height: '100%',\n//   backgroundColor: 'rgba(0,0,0,0.5)',\n//   display: 'flex',\n//   justifyContent: 'center',\n//   alignItems: 'center',\n// };\n\n// const popupContentStyle = {\n//   background: '#fff',\n//   padding: '20px',\n//   borderRadius: '8px',\n//   textAlign: 'center',\n// };\n\n// export default ProductForm;\n\n// import React, { useState, useEffect } from 'react';\n// import { addProduct, updateProduct, deleteProduct } from './productService';\n// import { jwtDecode } from 'jwt-decode'; // Corrected import for jwt-decode\n\n// const ProductForm = ({ editProduct, onSave }) => {\n//   const [product, setProduct] = useState({ name: '', price: '', description: '' });\n//   const [image, setImage] = useState(null);\n//   const [preview, setPreview] = useState(null);\n//   const [successPopup, setSuccessPopup] = useState(false);\n\n//   useEffect(() => {\n//     if (editProduct) {\n//       setProduct({\n//         name: editProduct.name || '',\n//         price: editProduct.price || '',\n//         description: editProduct.description || '',\n//       });\n\n//       if (editProduct.image) {\n//         setPreview(`http://localhost:5000/uploads/${editProduct.image}`);\n//       }\n//     }\n//   }, [editProduct]);\n\n//   const handleImageChange = (e) => {\n//     const file = e.target.files[0];\n//     setImage(file);\n//     setPreview(URL.createObjectURL(file));\n//   };\n\n//   // Token validation function\n//   const getToken = () => {\n//     const token = localStorage.getItem('token');\n//     if (!token) {\n//       alert('No token found');\n//       return null;\n//     }\n\n//     try {\n//       const decodedToken = jwtDecode(token); // Updated here to use jwtDecode\n//       if (decodedToken.exp * 1000 < Date.now()) {\n//         alert('Session expired. Please login again.');\n//         localStorage.removeItem('token'); // Remove expired token\n//         return null;\n//       }\n//       return token;\n//     } catch (error) {\n//       console.error('Invalid token:', error);\n//       localStorage.removeItem('token');\n//       return null;\n//     }\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     const token = getToken();\n//     if (!token) return;\n\n//     const formData = new FormData();\n//     formData.append('name', product.name);\n//     formData.append('price', product.price);\n//     formData.append('description', product.description);\n//     if (image) formData.append('image', image);\n\n//     try {\n//       if (editProduct?._id) {\n//         await updateProduct(editProduct._id, formData, token);\n//       } else {\n//         await addProduct(formData, token);\n//       }\n\n//       setSuccessPopup(true);\n//       if (onSave) onSave();\n//       setProduct({ name: '', price: '', description: '' });\n//       setImage(null);\n//       setPreview(null);\n//     } catch (error) {\n//       console.error(error);\n//       alert('Error saving product: ' + (error.response?.data?.message || error.message));\n//     }\n//   };\n\n//   const handleDelete = async () => {\n//     if (editProduct && window.confirm('Are you sure?')) {\n//       const token = getToken();\n//       if (!token) return;\n\n//       try {\n//         await deleteProduct(editProduct._id, token);\n//         if (onSave) onSave();\n//       } catch (error) {\n//         alert('Error deleting product');\n//         console.error(error);\n//       }\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <form onSubmit={handleSubmit}>\n//         <h3>{editProduct ? 'Edit' : 'Add'} Product</h3>\n//         <input placeholder=\"Name\" value={product.name} onChange={e => setProduct({ ...product, name: e.target.value })} />\n//         <input placeholder=\"Price\" value={product.price} onChange={e => setProduct({ ...product, price: e.target.value })} />\n//         <textarea placeholder=\"Description\" value={product.description} onChange={e => setProduct({ ...product, description: e.target.value })} />\n//         <input type=\"file\" accept=\"image/*\" onChange={handleImageChange} />\n//         {preview && <img src={preview} alt=\"Preview\" style={{ width: '150px' }} />}\n//         <button type=\"submit\">{editProduct ? 'Update' : 'Add'} Product</button>\n//         {editProduct && <button type=\"button\" onClick={handleDelete}>Delete</button>}\n//       </form>\n\n//       {successPopup && (\n//         <div style={popupStyle}>\n//           <div style={popupContentStyle}>\n//             <h4>Product successfully {editProduct ? 'updated' : 'added'}!</h4>\n//             <button onClick={() => setSuccessPopup(false)}>Close</button>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// const popupStyle = {\n//   position: 'fixed',\n//   top: 0, left: 0,\n//   width: '100%', height: '100%',\n//   backgroundColor: 'rgba(0,0,0,0.5)',\n//   display: 'flex',\n//   justifyContent: 'center',\n//   alignItems: 'center',\n// };\n\n// const popupContentStyle = {\n//   background: '#fff',\n//   padding: '20px',\n//   borderRadius: '8px',\n//   textAlign: 'center',\n// };\n\n// export default ProductForm;","map":{"version":3,"names":[],"sources":["C:/Users/sharm/OneDrive/Desktop/Zaeesh/transport11/src/component/ProductForm.jsx"],"sourcesContent":["\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import { addProduct, updateProduct, deleteProduct } from './productService';\r\n\r\n// const ProductForm = ({ editProduct, onSave }) => {\r\n//   const [product, setProduct] = useState({ name: '', price: '', description: '' });\r\n//   const [image, setImage] = useState(null);\r\n//   console.log(image,'image');\r\n//   const [preview, setPreview] = useState(null);\r\n//   const [successPopup, setSuccessPopup] = useState(false);\r\n\r\n//   useEffect(() => {\r\n//     if (editProduct) {\r\n//       setProduct({\r\n//         name: editProduct.name || '',\r\n//         price: editProduct.price || '',\r\n//         description: editProduct.description || '',\r\n//       });\r\n\r\n//       if (editProduct.image) {\r\n//         setPreview(`http://localhost:5000/uploads/${editProduct.image}`);\r\n//       }\r\n//     }\r\n//   }, [editProduct]);\r\n\r\n//   const handleImageChange = (e) => {\r\n//     const file = e.target.files[0];\r\n//     setImage(file);\r\n//     setPreview(URL.createObjectURL(file));\r\n//   };\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n\r\n//     const formData = new FormData();\r\n//     formData.append('name', product.name);\r\n//     formData.append('price', product.price);\r\n//     formData.append('description', product.description);\r\n//     if (image) formData.append('image', image);\r\n\r\n//     const token = localStorage.getItem('token');\r\n//     if (!token) return alert('No token found');\r\n\r\n//     try {\r\n//       if (editProduct?._id) {\r\n//         await updateProduct(editProduct._id, formData, token);\r\n//       } else {\r\n//         await addProduct(formData, token);\r\n//       }\r\n\r\n//       setSuccessPopup(true);\r\n//       if (onSave) onSave();\r\n//       setProduct({ name: '', price: '', description: '' });\r\n//       setImage(null);\r\n//       setPreview(null);\r\n//     } catch (error) {\r\n//       console.error(error);\r\n//       alert('Error saving product: ' + (error.response?.data?.message || error.message));\r\n//     }\r\n//   };\r\n\r\n//   const handleDelete = async () => {\r\n//     if (editProduct && window.confirm('Are you sure?')) {\r\n//       try {\r\n//         await deleteProduct(editProduct._id);\r\n//         if (onSave) onSave();\r\n//       } catch (error) {\r\n//         alert('Error deleting product');\r\n//         console.error(error);\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <form onSubmit={handleSubmit}>\r\n//         <h3>{editProduct ? 'Edit' : 'Add'} Product</h3>\r\n//         <input placeholder=\"Name\" value={product.name} onChange={e => setProduct({ ...product, name: e.target.value })} />\r\n//         <input placeholder=\"Price\" value={product.price} onChange={e => setProduct({ ...product, price: e.target.value })} />\r\n//         <textarea placeholder=\"Description\" value={product.description} onChange={e => setProduct({ ...product, description: e.target.value })} />\r\n//         <input type=\"file\" accept=\"image/*\" onChange={handleImageChange} />\r\n//         {preview && <img src={preview} alt=\"Preview\" style={{ width: '150px' }} />}\r\n//         <button type=\"submit\">{editProduct ? 'Update' : 'Add'} Product</button>\r\n//         {editProduct && <button type=\"button\" onClick={handleDelete}>Delete</button>}\r\n//       </form>\r\n\r\n//       {successPopup && (\r\n//         <div style={popupStyle}>\r\n//           <div style={popupContentStyle}>\r\n//             <h4>Product successfully {editProduct ? 'updated' : 'added'}!</h4>\r\n//             <button onClick={() => setSuccessPopup(false)}>Close</button>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// const popupStyle = {\r\n//   position: 'fixed',\r\n//   top: 0, left: 0,\r\n//   width: '100%', height: '100%',\r\n//   backgroundColor: 'rgba(0,0,0,0.5)',\r\n//   display: 'flex',\r\n//   justifyContent: 'center',\r\n//   alignItems: 'center',\r\n// };\r\n\r\n// const popupContentStyle = {\r\n//   background: '#fff',\r\n//   padding: '20px',\r\n//   borderRadius: '8px',\r\n//   textAlign: 'center',\r\n// };\r\n\r\n// export default ProductForm;\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import { addProduct, updateProduct, deleteProduct } from './productService';\r\n// import { jwtDecode } from 'jwt-decode'; // Corrected import for jwt-decode\r\n\r\n// const ProductForm = ({ editProduct, onSave }) => {\r\n//   const [product, setProduct] = useState({ name: '', price: '', description: '' });\r\n//   const [image, setImage] = useState(null);\r\n//   const [preview, setPreview] = useState(null);\r\n//   const [successPopup, setSuccessPopup] = useState(false);\r\n\r\n//   useEffect(() => {\r\n//     if (editProduct) {\r\n//       setProduct({\r\n//         name: editProduct.name || '',\r\n//         price: editProduct.price || '',\r\n//         description: editProduct.description || '',\r\n//       });\r\n\r\n//       if (editProduct.image) {\r\n//         setPreview(`http://localhost:5000/uploads/${editProduct.image}`);\r\n//       }\r\n//     }\r\n//   }, [editProduct]);\r\n\r\n//   const handleImageChange = (e) => {\r\n//     const file = e.target.files[0];\r\n//     setImage(file);\r\n//     setPreview(URL.createObjectURL(file));\r\n//   };\r\n\r\n//   // Token validation function\r\n//   const getToken = () => {\r\n//     const token = localStorage.getItem('token');\r\n//     if (!token) {\r\n//       alert('No token found');\r\n//       return null;\r\n//     }\r\n\r\n//     try {\r\n//       const decodedToken = jwtDecode(token); // Updated here to use jwtDecode\r\n//       if (decodedToken.exp * 1000 < Date.now()) {\r\n//         alert('Session expired. Please login again.');\r\n//         localStorage.removeItem('token'); // Remove expired token\r\n//         return null;\r\n//       }\r\n//       return token;\r\n//     } catch (error) {\r\n//       console.error('Invalid token:', error);\r\n//       localStorage.removeItem('token');\r\n//       return null;\r\n//     }\r\n//   };\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n\r\n//     const token = getToken();\r\n//     if (!token) return;\r\n\r\n//     const formData = new FormData();\r\n//     formData.append('name', product.name);\r\n//     formData.append('price', product.price);\r\n//     formData.append('description', product.description);\r\n//     if (image) formData.append('image', image);\r\n\r\n//     try {\r\n//       if (editProduct?._id) {\r\n//         await updateProduct(editProduct._id, formData, token);\r\n//       } else {\r\n//         await addProduct(formData, token);\r\n//       }\r\n\r\n//       setSuccessPopup(true);\r\n//       if (onSave) onSave();\r\n//       setProduct({ name: '', price: '', description: '' });\r\n//       setImage(null);\r\n//       setPreview(null);\r\n//     } catch (error) {\r\n//       console.error(error);\r\n//       alert('Error saving product: ' + (error.response?.data?.message || error.message));\r\n//     }\r\n//   };\r\n\r\n//   const handleDelete = async () => {\r\n//     if (editProduct && window.confirm('Are you sure?')) {\r\n//       const token = getToken();\r\n//       if (!token) return;\r\n\r\n//       try {\r\n//         await deleteProduct(editProduct._id, token);\r\n//         if (onSave) onSave();\r\n//       } catch (error) {\r\n//         alert('Error deleting product');\r\n//         console.error(error);\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <form onSubmit={handleSubmit}>\r\n//         <h3>{editProduct ? 'Edit' : 'Add'} Product</h3>\r\n//         <input placeholder=\"Name\" value={product.name} onChange={e => setProduct({ ...product, name: e.target.value })} />\r\n//         <input placeholder=\"Price\" value={product.price} onChange={e => setProduct({ ...product, price: e.target.value })} />\r\n//         <textarea placeholder=\"Description\" value={product.description} onChange={e => setProduct({ ...product, description: e.target.value })} />\r\n//         <input type=\"file\" accept=\"image/*\" onChange={handleImageChange} />\r\n//         {preview && <img src={preview} alt=\"Preview\" style={{ width: '150px' }} />}\r\n//         <button type=\"submit\">{editProduct ? 'Update' : 'Add'} Product</button>\r\n//         {editProduct && <button type=\"button\" onClick={handleDelete}>Delete</button>}\r\n//       </form>\r\n\r\n//       {successPopup && (\r\n//         <div style={popupStyle}>\r\n//           <div style={popupContentStyle}>\r\n//             <h4>Product successfully {editProduct ? 'updated' : 'added'}!</h4>\r\n//             <button onClick={() => setSuccessPopup(false)}>Close</button>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// const popupStyle = {\r\n//   position: 'fixed',\r\n//   top: 0, left: 0,\r\n//   width: '100%', height: '100%',\r\n//   backgroundColor: 'rgba(0,0,0,0.5)',\r\n//   display: 'flex',\r\n//   justifyContent: 'center',\r\n//   alignItems: 'center',\r\n// };\r\n\r\n// const popupContentStyle = {\r\n//   background: '#fff',\r\n//   padding: '20px',\r\n//   borderRadius: '8px',\r\n//   textAlign: 'center',\r\n// };\r\n\r\n// export default ProductForm;\r\n"],"mappings":";;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}